name: Tests

on:
  push:
    branches:
      - "master"
      - "devel"
      - "main"
    paths:
      - "**.py"
      - "**.yaml"
      - "**.yml"
      - "**.toml"
      - "**/data/**"
      - ".github/constraints.txt"
  pull_request:
    branches:
      - "master"
      - "devel"
      - "main"
    paths:
      - "**.py"
      - "**.yaml"
      - "**.yml"
      - "**.toml"

permissions:
  contents: read  # Minimal required permissions

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}-${{ github.ref != 'refs/heads/master' || github.sha }}
  cancel-in-progress: true

env:
  DEFAULT_PYTHON: "3.13"

jobs:

  lint:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip_ci]')
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install uv
        #   uses: astral-sh/setup-uv@v6
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh

      
      - name: Install Python with uv
        run: |
          uv python install ${{ env.DEFAULT_PYTHON }}

      - name: Install the project
        run: |
          uv sync --all-extras --group pre-commit

      - name: Run pre commit checks
        run: |
          uv run pre-commit run -a

  
  typing:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip_ci]')
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Install Python with uv
        run: |
          uv python install ${{ env.DEFAULT_PYTHON }}

      - name: Install the project
        run: |
          uv sync --all-extras --group mypy

      # - name: Run mypy static type checks
      #   run: |
      #     mypy src docs/soruce/conf.py


  docs:
    runs-on: ubuntu-latest
    needs: [lint, typing]
    steps:
      - name: ✅ Check out the repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6

      - name: 🧠 Restore uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ env.DEFAULT_PYTHON }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}- ${{ env.DEFAULT_PYTHON }}-

      - name: 🐍 Install Python with uv
        run: |
          uv python install ${{ env.DEFAULT_PYTHON }}

      - name: 📦 Install the project
        run: uv sync --all-extras --group docs

      - name: 📦 Build documentation
        run: |
          uv run sphinx-build docs/source docs/build

  tests:
    name: "Python ${{ matrix.python-version }} on ${{ matrix.os }}"
    needs: [lint, typing]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]

    steps:

      - name: ✅ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: 📦 Install uv
        uses: astral-sh/setup-uv@v6

      - name: 🧠 Restore uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}- ${{ matrix.python-version }}-

      - name: 🐍 Install Python with uv
        run: |
          uv python install ${{ matrix.python-version }}

      - name: 📦 Install the project
        run: uv sync --all-extras --group test

      - name: ✅ Run tests
        run: uv run coverage run --parallel -m pytest

      - name: 🔃 Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ runner.os }}-${{ matrix.python-version }}
          path: ".coverage.*"
          include-hidden-files: true
          if-no-files-found: error

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:

      - name: ✅ Check out the repository
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: 🧠 Restore uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: uv-${{ runner.os }}-${{ env.DEFAULT_PYTHON }}-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}- ${{ env.DEFAULT_PYTHON }}-

      - name: 🐍 Install Python with uv
        run: |
          uv python install ${{ env.DEFAULT_PYTHON }}

      - name: 📦 Install the project
        run: uv sync --all-extras --group coverage

      - name: 🔃 Download coverage data
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: 📦 Combine coverage data and display human readable report
        run: |
          coverage combine
          coverage report

      - name: 📦 Create coverage report
        run: |
          coverage xml

      - name: 📤 Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
